package com.jilian.ccbticketing.Uitls;import android.content.Context;import android.content.Intent;import android.os.Looper;import android.widget.Toast;import com.jilian.ccbticketing.Model.BaseModel;import org.apache.http.HttpResponse;import org.apache.http.HttpVersion;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.conn.ClientConnectionManager;import org.apache.http.conn.params.ConnManagerParams;import org.apache.http.conn.scheme.PlainSocketFactory;import org.apache.http.conn.scheme.Scheme;import org.apache.http.conn.scheme.SchemeRegistry;import org.apache.http.conn.ssl.SSLSocketFactory;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;import org.apache.http.params.HttpProtocolParams;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import org.json.JSONException;import org.json.JSONObject;import java.io.IOException;import java.security.KeyStore;import java.util.Iterator;import java.util.Map;import okhttp3.Call;import okhttp3.Callback;import okhttp3.FormBody;import okhttp3.OkHttpClient;import okhttp3.Request;import okhttp3.Response;;;public class HttpUtils {    private String resultData;    private Intent intent = new Intent();    public Intent getIntent() {        return intent;    }    private HttpPost getPost(Context context, BaseModel base , String apiInterface){        HttpPost httpPost;        if (apiInterface!=null) {           // https://lgh.ccbjrfw.com/lgh/pos/qrySale            httpPost = new HttpPost( base.getIp() + "/lgh/mpos/" + apiInterface);            httpPost.setHeader("teller_code",base.getSerialNo());            httpPost.setHeader("jwt",base.getToken());        }else {            Toast.makeText(context,"服务器链接失败", Toast.LENGTH_SHORT).show();            return null;        }        return httpPost;    }    /**     *     */    public String baseMapHttp(final Context context, BaseModel base, String apiInterface, Map map)    {        OkHttpClient mOkHttpClient = new OkHttpClient();//创建OkHttpClient对象。        FormBody.Builder formBody = new FormBody.Builder();//创建表单请求体        Iterator<Map.Entry<String, Object>> entries = map.entrySet().iterator();        while (entries.hasNext()) {            Map.Entry<String, Object> entry = entries.next();            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());            formBody.add( entry.getKey(),entry.getValue().toString());//传递键值对参数        }        Request request = new Request.Builder()//创建Request 对象。                .url("http://" + base.getIp() + "/lgh/pos/" + apiInterface)                .header("teller_code",base.getSerialNo())                .addHeader("jwt", base.getToken())                .post(formBody.build())//传递请求体                .build();       // createBuilder(map,base).url("http://"+base.getIp()+":"+base.getPort()+"/"+apiInterface) .post(formBody) .build();        mOkHttpClient.newCall(request).enqueue(new Callback() {            @Override            public void onFailure(Call call, IOException e) {                Looper.prepare();                Toast.makeText(context, "服务器链接失败", Toast.LENGTH_SHORT).show();                Looper.loop();            }            @Override            public void onResponse(Call call, Response response) throws IOException {                resultData = response.body().string();            }        });        return resultData;    }    public String baseHttp(final Context context, BaseModel base, String apiInterface, Map map)    {        HttpParams httpParameters = new BasicHttpParams();        // 设置连接管理器的超时        ConnManagerParams.setTimeout(httpParameters, 5000);        // 设置连接超时        HttpConnectionParams.setConnectionTimeout(httpParameters, 5000);        // 设置socket超时        HttpConnectionParams.setSoTimeout(httpParameters, 5000);        HttpClient httpClient = getHttpClient(httpParameters);        HttpPost httpPost =getPost(context,base,apiInterface);        try {            JSONObject param = new JSONObject();            Iterator<Map.Entry<String, Object>> entries = map.entrySet().iterator();            while (entries.hasNext()) {                Map.Entry<String, Object> entry = entries.next();               // System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue());                param.put( entry.getKey(),entry.getValue());//传递键值对参数            }            StringEntity se = new StringEntity(param.toString(), "utf-8");            httpPost.setEntity(se);          /*  // 设置连接超时、读取超时            httpClient.getParams().setIntParameter(                    HttpConnectionParams.SO_TIMEOUT, 5000); // 超时设置            httpClient.getParams().setIntParameter(                    HttpConnectionParams.CONNECTION_TIMEOUT, 5000);// 连接超时*/            HttpResponse httpResponse = httpClient.execute(httpPost);            resultData = EntityUtils.toString(httpResponse.getEntity());        }catch (Exception e)        {            //Toast.makeText(context,"服务器连接失败！",Toast.LENGTH_SHORT).show();            JSONObject jsonObject =new JSONObject();            try {                jsonObject.put("code",501);                jsonObject.put("msg","服务器连接失败");            } catch (JSONException e1) {                e1.printStackTrace();            }            String s = jsonObject.toString();            return s;        }        return resultData;    }    private HttpClient getHttpClient(HttpParams params) {        try {            KeyStore trustStore = KeyStore.getInstance(KeyStore                    .getDefaultType());            trustStore.load(null, null);            SSLSocketFactory sf = new SSLSocketFactoryImp(trustStore);            sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);            HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);            HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);            HttpProtocolParams.setUseExpectContinue(params, true);            // 设置http https支持            SchemeRegistry registry = new SchemeRegistry();            registry.register(new Scheme("http", PlainSocketFactory                    .getSocketFactory(), 80));            registry.register(new Scheme("https", sf, 443));// SSL/TSL的认证过程，端口为443            ClientConnectionManager ccm = new ThreadSafeClientConnManager(                    params, registry);            return new DefaultHttpClient(ccm, params);        } catch (Exception e) {            return new DefaultHttpClient(params);        }    }}